#!/usr/bin/env python

import os
import sys
import numpy as np
import argparse as arg
import matplotlib as mpl 
import matplotlib.pyplot as plt 
from StringIO import StringIO

def options():
    '''Defines the options of the script.'''

    parser = arg.ArgumentParser(description='Plots a nice graph with excitonic coefficients.')

    # Optional arguments
    parser.add_argument('-f', '--filename', default='diag.dat', help='''File diag.dat from EXAT.''')

    parser.add_argument('-s', '--save', help='''Save the plot as an image.
    Specify the extension.''')

    parser.add_argument('--show', help='''Show the plot in an external window.''',
    default=False, action='store_true')

    parser.add_argument('--square', help='''Use squares of coefficients for the plot.''',
    default=False, action='store_true')

    args = parser.parse_args()

    if not args.show and not args.save:
        parser.print_help()
        sys.exit()

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()

    return args


def doplot(coeff):

    fig, ax = plt.subplots()

    # Use custom colormap, defined in a function below
    cm = mpl.colors.ListedColormap(custom_cm())

    im = ax.pcolor(coeff, cmap=cm)
    fig.colorbar(im)
    
    # Generate labels
    xlabels = np.arange(1, len(coeff[0])+1)
    
    # X axis
    # Hide main labels and assign to minor labels their value
    # This way label will appear in the middle of the matrix element
    plt.xlabel("Local States")
    ax.set_xticks(xlabels)
    ax.set_xticklabels(xlabels, visible=False)
    ax.set_xticks(xlabels - 0.5, minor=True)
    ax.set_xticklabels(xlabels, minor=True)
    ax.set_xlim(right=xlabels[-1])
    
    # Y axis
    # Hide main labels and assign to minor labels their value
    # This way label will appear in the middle of the matrix element
    plt.ylabel("Excitonic States")
    ax.set_yticks(xlabels)
    ax.set_yticklabels(xlabels, visible=False)
    ax.set_yticks(xlabels - 0.5, minor=True)
    ax.set_yticklabels(xlabels, minor=True)
    ax.set_ylim(top=xlabels[-1])
    
    # Rotate labels for a fancier plot
    plt.setp(ax.xaxis.get_minorticklabels(), rotation=-45)
    plt.setp(ax.yaxis.get_minorticklabels(), rotation=-45)
    
    # Show grid for separation of matrix elements
    plt.grid()


def checkfile(filename):

    if not os.path.isfile(filename):
        print("\nFile %s not found!\n" % filename)
        sys.exit()


def custom_cm():
    '''Define a nicer colormap to use in the plot'''

    C = StringIO('''0.09411764705882353 0.1254901960784314 0.9019607843137255
                    0.1098039215686274 0.1607843137254902 0.8705882352941177
                    0.1254901960784314 0.2 0.8392156862745098
                    0.1411764705882353 0.2352941176470588 0.807843137254902
                    0.1568627450980392 0.2705882352941176 0.7764705882352941
                    0.1725490196078431 0.3058823529411765 0.7490196078431373
                    0.1882352941176471 0.3411764705882353 0.7176470588235294
                    0.203921568627451 0.3764705882352941 0.6862745098039216
                    0.2196078431372549 0.4117647058823529 0.6549019607843137
                    0.2352941176470588 0.4470588235294118 0.6235294117647059
                    0.2470588235294118 0.4823529411764706 0.596078431372549
                    0.2627450980392157 0.5176470588235295 0.5647058823529412
                    0.2784313725490196 0.5529411764705883 0.5333333333333333
                    0.2941176470588235 0.5882352941176471 0.5019607843137255
                    0.3098039215686275 0.6235294117647059 0.4705882352941176
                    0.3254901960784314 0.6588235294117647 0.4431372549019608
                    0.3411764705882353 0.6941176470588235 0.4117647058823529
                    0.3568627450980392 0.7294117647058823 0.3803921568627451
                    0.3725490196078431 0.7647058823529411 0.3490196078431372
                    0.3882352941176471 0.8 0.3215686274509804
                    0.4 0.8274509803921568 0.2941176470588235
                    0.407843137254902 0.8352941176470589 0.2784313725490196
                    0.4156862745098039 0.8431372549019608 0.2627450980392157
                    0.4235294117647059 0.8509803921568627 0.2470588235294118
                    0.4313725490196079 0.8549019607843137 0.2313725490196079
                    0.4352941176470588 0.8627450980392157 0.2196078431372549
                    0.4431372549019608 0.8705882352941177 0.203921568627451
                    0.4509803921568628 0.8745098039215686 0.1882352941176471
                    0.4588235294117647 0.8823529411764706 0.1725490196078431
                    0.4666666666666667 0.8901960784313725 0.1568627450980392
                    0.4705882352941176 0.8980392156862745 0.1411764705882353
                    0.4784313725490196 0.9019607843137255 0.1294117647058824
                    0.4862745098039216 0.9098039215686274 0.1137254901960784
                    0.4941176470588236 0.9176470588235294 0.09803921568627451
                    0.5019607843137255 0.9215686274509803 0.08235294117647059
                    0.5058823529411764 0.9294117647058824 0.06666666666666667
                    0.5137254901960784 0.9372549019607843 0.05098039215686274
                    0.5215686274509804 0.9450980392156862 0.0392156862745098
                    0.5294117647058824 0.9490196078431372 0.02352941176470588
                    0.5372549019607843 0.9568627450980393 0.007843137254901961
                    0.5450980392156862 0.9607843137254902 0
                    0.5529411764705883 0.9647058823529412 0
                    0.5607843137254902 0.9647058823529412 0
                    0.5686274509803921 0.9686274509803922 0
                    0.5803921568627451 0.9686274509803922 0
                    0.5882352941176471 0.9725490196078431 0
                    0.596078431372549 0.9764705882352941 0
                    0.6078431372549019 0.9764705882352941 0
                    0.615686274509804 0.9803921568627451 0
                    0.6235294117647059 0.9803921568627451 0
                    0.6313725490196078 0.984313725490196 0
                    0.6431372549019608 0.984313725490196 0
                    0.6509803921568628 0.9882352941176471 0
                    0.6588235294117647 0.9882352941176471 0
                    0.6666666666666666 0.9921568627450981 0
                    0.6784313725490196 0.9921568627450981 0
                    0.6862745098039216 0.996078431372549 0
                    0.6941176470588235 1 0
                    0.7058823529411765 1 0
                    0.7137254901960784 1 0
                    0.7254901960784313 1 0
                    0.7411764705882353 1 0
                    0.7568627450980392 1 0
                    0.7686274509803922 1 0
                    0.7843137254901961 1 0
                    0.8 1 0
                    0.8117647058823529 1 0
                    0.8274509803921568 1 0
                    0.8431372549019608 1 0
                    0.8588235294117647 1 0
                    0.8705882352941177 1 0
                    0.8862745098039215 1 0
                    0.9019607843137255 1 0
                    0.9137254901960784 1 0
                    0.9294117647058824 1 0
                    0.9450980392156862 1 0
                    0.9607843137254902 1 0
                    0.9725490196078431 1 0
                    0.9882352941176471 1 0
                    1 1 0
                    1 1 0
                    1 0.9921568627450981 0
                    1 0.984313725490196 0
                    1 0.9764705882352941 0
                    1 0.9647058823529412 0
                    1 0.9568627450980393 0
                    1 0.9450980392156862 0
                    1 0.9372549019607843 0
                    1 0.9254901960784314 0
                    1 0.9176470588235294 0
                    1 0.9098039215686274 0
                    1 0.8980392156862745 0
                    1 0.8901960784313725 0
                    1 0.8784313725490196 0
                    1 0.8705882352941177 0
                    1 0.8588235294117647 0
                    1 0.8509803921568627 0
                    1 0.8431372549019608 0
                    1 0.8313725490196079 0
                    1 0.8235294117647058 0
                    1 0.8117647058823529 0
                    1 0.803921568627451 0
                    1 0.792156862745098 0
                    1 0.7843137254901961 0
                    1 0.7764705882352941 0
                    1 0.7647058823529411 0
                    1 0.7568627450980392 0
                    1 0.7450980392156863 0
                    1 0.7372549019607844 0
                    1 0.7294117647058823 0
                    1 0.7176470588235294 0
                    1 0.7098039215686275 0
                    1 0.6980392156862745 0
                    1 0.6901960784313725 0
                    1 0.6784313725490196 0
                    1 0.6705882352941176 0
                    1 0.6627450980392157 0
                    1 0.6509803921568628 0
                    1 0.6431372549019608 0
                    1 0.6313725490196078 0
                    1 0.6235294117647059 0
                    1 0.611764705882353 0
                    1 0.6039215686274509 0
                    1 0.596078431372549 0
                    1 0.5843137254901961 0
                    1 0.5764705882352941 0
                    1 0.5647058823529412 0
                    1 0.5568627450980392 0
                    1 0.5450980392156862 0
                    1 0.5372549019607843 0
                    1 0.5294117647058824 0
                    1 0.5254901960784314 0
                    1 0.5215686274509804 0
                    1 0.5176470588235295 0
                    1 0.5137254901960784 0
                    1 0.5098039215686274 0
                    1 0.5058823529411764 0
                    1 0.5019607843137255 0
                    1 0.4980392156862745 0
                    1 0.4941176470588236 0
                    1 0.4901960784313725 0
                    1 0.4862745098039216 0
                    1 0.4784313725490196 0
                    1 0.4745098039215686 0
                    1 0.4705882352941176 0
                    1 0.4666666666666667 0
                    1 0.4627450980392157 0
                    1 0.4588235294117647 0
                    1 0.4549019607843137 0
                    1 0.4509803921568628 0
                    1 0.4470588235294118 0
                    1 0.4431372549019608 0
                    1 0.4392156862745098 0
                    1 0.4352941176470588 0
                    1 0.4313725490196079 0
                    1 0.4274509803921568 0
                    1 0.4235294117647059 0
                    1 0.4196078431372549 0
                    1 0.4156862745098039 0
                    1 0.4117647058823529 0
                    1 0.407843137254902 0
                    1 0.403921568627451 0
                    1 0.4 0
                    1 0.396078431372549 0
                    1 0.392156862745098 0
                    1 0.3882352941176471 0
                    1 0.3843137254901961 0
                    1 0.3764705882352941 0
                    1 0.3725490196078431 0
                    1 0.3686274509803922 0
                    1 0.3647058823529412 0
                    1 0.3607843137254902 0
                    1 0.3568627450980392 0
                    1 0.3529411764705883 0
                    1 0.3490196078431372 0
                    1 0.3450980392156863 0
                    1 0.3411764705882353 0
                    1 0.3372549019607843 0
                    1 0.3333333333333333 0
                    1 0.3294117647058823 0
                    1 0.3254901960784314 0
                    1 0.3215686274509804 0
                    1 0.3176470588235294 0
                    1 0.3176470588235294 0
                    1 0.3137254901960784 0
                    1 0.3098039215686275 0
                    1 0.3058823529411765 0
                    1 0.3019607843137255 0
                    1 0.3019607843137255 0
                    1 0.2980392156862745 0
                    1 0.2941176470588235 0
                    1 0.2901960784313726 0
                    1 0.2862745098039216 0
                    1 0.2862745098039216 0
                    1 0.2823529411764706 0
                    1 0.2784313725490196 0
                    1 0.2745098039215687 0
                    1 0.2705882352941176 0
                    1 0.2705882352941176 0
                    1 0.2666666666666667 0
                    1 0.2627450980392157 0
                    1 0.2588235294117647 0
                    1 0.2549019607843137 0
                    1 0.2509803921568627 0
                    1 0.2509803921568627 0
                    1 0.2470588235294118 0
                    1 0.2431372549019608 0
                    1 0.2392156862745098 0
                    1 0.2352941176470588 0
                    1 0.2352941176470588 0
                    1 0.2313725490196079 0
                    1 0.2274509803921569 0
                    1 0.2235294117647059 0
                    1 0.2196078431372549 0
                    1 0.2196078431372549 0
                    1 0.2156862745098039 0
                    1 0.2117647058823529 0
                    1 0.207843137254902 0
                    1 0.203921568627451 0
                    1 0.203921568627451 0
                    1 0.2 0
                    1 0.196078431372549 0
                    1 0.1921568627450981 0
                    1 0.1882352941176471 0
                    1 0.1882352941176471 0
                    1 0.1843137254901961 0
                    1 0.1803921568627451 0
                    1 0.1764705882352941 0
                    1 0.1725490196078431 0
                    1 0.1686274509803922 0
                    1 0.1686274509803922 0
                    1 0.1647058823529412 0
                    1 0.1607843137254902 0
                    1 0.1568627450980392 0
                    1 0.1529411764705882 0
                    1 0.1490196078431373 0
                    1 0.1450980392156863 0
                    1 0.1450980392156863 0
                    1 0.1411764705882353 0
                    1 0.1372549019607843 0
                    1 0.1333333333333333 0
                    1 0.1294117647058824 0
                    1 0.1254901960784314 0
                    1 0.1215686274509804 0
                    1 0.1176470588235294 0
                    1 0.1176470588235294 0
                    1 0.1137254901960784 0
                    1 0.1098039215686274 0
                    1 0.1058823529411765 0
                    1 0.1019607843137255 0
                    1 0.09803921568627451 0
                    1 0.09411764705882353 0
                    1 0.09019607843137255 0
                    1 0.09019607843137255 0
                    1 0.08627450980392157 0
                    1 0.08235294117647059 0
                    1 0.07843137254901961 0
                    1 0.07450980392156863 0
                    1 0.07058823529411765 0
                    1 0.06666666666666667 0
                    1 0.06666666666666667 0
                    1 0.06274509803921569 0
                    1 0.05882352941176471 0
                    1 0.05490196078431372 0
                    1 0.05098039215686274 0
                    1 0.04705882352941176 0
                    1 0.04313725490196078 0
                    1 0.0392156862745098 0
                    1 0.0392156862745098 0
                    1 0.03529411764705882 0
                    1 0.03137254901960784 0
                    1 0.02745098039215686 0
                    1 0.02352941176470588 0
                    1 0.0196078431372549 0
                    1 0.01568627450980392 0
                    1 0.01176470588235294 0
                    1 0.01176470588235294 0
                    1 0.007843137254901961 0
                    1 0.00392156862745098 0
                    1 0 0''')

    return np.loadtxt(C)


if __name__ == '__main__':

    args = options()

    f = args.filename
    checkfile(f)
    diag = np.loadtxt(f)
    
    # Get coefficients from the diag.dat-like file
    coeff = diag[:diag.shape[0]/2,2:]
    
    if args.square:
        coeff = np.square(coeff)

    doplot(coeff)

    # Save plot as vector image
    if args.save:
        plt.savefig('coeffs.%s' % args.save)
    
    # Show the plot
    if args.show:
        plt.show()
